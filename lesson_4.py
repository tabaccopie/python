# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
from sys import argv

try:
    name, hours, m_hours, bonus = argv
    print("Имя скрипта: ", name)
    print(f"Результат: {float(hours) * float(m_hours) + float(bonus)}")
except ValueError:
    print("Ошибка ввода параметров!")

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего
# элемента. Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка
# использовать генератор. Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]. Результат: [12,
# 44, 4, 10, 78, 123].
my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [my_list[i] for i in range(1, len(my_list)) if my_list[i] > my_list[i - 1]]
print(new_list)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.
print([el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0])

# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел,
# соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания
# обязательно использовать генератор. Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4,
# 11]. Результат: [23, 1, 3, 10, 4, 11]
my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [el for el in my_list if my_list.count(el) == 1]
print(new_list)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти
# четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов
# списка. Подсказка: использовать функцию reduce().
from functools import reduce


def my_func(prev_el, el):
    return prev_el * el


print(reduce(my_func, [el for el in range(100, 1001)]))

# 6. Реализовать два небольших скрипта: а) итератор, генерирующий целые числа, начиная с указанного, б) итератор,
# повторяющий элементы некоторого списка, определенного заранее. Подсказка: использовать функцию count() и cycle()
# модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть
# условие его завершения. Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10
# завершаем цикл. Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет
# прекращено.

# ===== s1 ========
from sys import argv
from itertools import count

name, num = argv

for el in count(int(num)):
    if el > int(num) + 10:
        break
    else:
        print(el)

# ======== s2 ======
from sys import argv
from itertools import cycle

name, my_str = argv
i = 0
for el in cycle(my_str):
    if i > 20:
        break
    print(el)
    i += 1

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове
# функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и
# до n!. Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4
# = 24.
from math import factorial


def fact(num1):
    yield factorial(num1)


my_num = int(input("Введите значение: "))
i = 1
my_list = []
for i in range(1, my_num + 1):
    my_list.append([el for el in fact(i)])

print(my_list)
